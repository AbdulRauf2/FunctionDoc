FUNCTION validate_email_format(email_address)
    // Validates email address format using regex pattern
    
    // Check for null or empty
    IF email_address IS NULL OR email_address IS EMPTY THEN
        RETURN FALSE
    END IF
    
    // Trim whitespace
    email_address = TRIM(email_address)
    
    // Check length constraints
    IF LENGTH(email_address) < 5 OR LENGTH(email_address) > 254 THEN
        RETURN FALSE
    END IF
    
    // Email regex pattern
    email_pattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
    
    // Match against pattern
    IF NOT REGEX_MATCH(email_address, email_pattern) THEN
        RETURN FALSE
    END IF
    
    // Check for consecutive dots
    IF CONTAINS(email_address, "..") THEN
        RETURN FALSE
    END IF
    
    // Split into local and domain parts
    parts = SPLIT(email_address, "@")
    local_part = parts[0]
    domain_part = parts[1]
    
    // Validate local part
    IF LENGTH(local_part) > 64 THEN
        RETURN FALSE
    END IF
    
    // Validate domain part
    IF NOT CONTAINS(domain_part, ".") THEN
        RETURN FALSE
    END IF
    
    // Check for valid TLD
    domain_parts = SPLIT(domain_part, ".")
    tld = domain_parts[LENGTH(domain_parts) - 1]
    
    IF LENGTH(tld) < 2 THEN
        RETURN FALSE
    END IF
    
    RETURN TRUE
END FUNCTION


FUNCTION validate_phone_number(phone_number, country_code)
    // Validates phone number format based on country code
    
    // Remove all non-digit characters except '+'
    cleaned_number = REGEX_REPLACE(phone_number, "[^0-9+]", "")
    
    // Check if empty after cleaning
    IF LENGTH(cleaned_number) = 0 THEN
        RETURN FALSE
    END IF
    
    // Country-specific validation
    SWITCH country_code
        CASE "US":
            // US format: 10 digits or +1 followed by 10 digits
            IF STARTS_WITH(cleaned_number, "+1") THEN
                cleaned_number = SUBSTRING(cleaned_number, 2)
            END IF
            
            IF LENGTH(cleaned_number) != 10 THEN
                RETURN FALSE
            END IF
            
            // Check valid area code (not starting with 0 or 1)
            area_code = SUBSTRING(cleaned_number, 0, 3)
            IF STARTS_WITH(area_code, "0") OR STARTS_WITH(area_code, "1") THEN
                RETURN FALSE
            END IF
            
        CASE "SG":
            // Singapore format: 8 digits starting with 6, 8, or 9
            IF STARTS_WITH(cleaned_number, "+65") THEN
                cleaned_number = SUBSTRING(cleaned_number, 3)
            END IF
            
            IF LENGTH(cleaned_number) != 8 THEN
                RETURN FALSE
            END IF
            
            first_digit = SUBSTRING(cleaned_number, 0, 1)
            IF first_digit NOT IN ["6", "8", "9"] THEN
                RETURN FALSE
            END IF
            
        CASE "UK":
            // UK format: 10-11 digits starting with 0 or +44
            IF STARTS_WITH(cleaned_number, "+44") THEN
                cleaned_number = "0" + SUBSTRING(cleaned_number, 3)
            END IF
            
            IF LENGTH(cleaned_number) < 10 OR LENGTH(cleaned_number) > 11 THEN
                RETURN FALSE
            END IF
            
            IF NOT STARTS_WITH(cleaned_number, "0") THEN
                RETURN FALSE
            END IF
            
        DEFAULT:
            // Generic validation: 7-15 digits
            IF LENGTH(cleaned_number) < 7 OR LENGTH(cleaned_number) > 15 THEN
                RETURN FALSE
            END IF
    END SWITCH
    
    RETURN TRUE
END FUNCTION
